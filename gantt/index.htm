<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gantt Chart</title>
    <style>
        body {
            font-family: sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f4f4f4;
        }

        .gantt-chart-container {
            border: 1px solid #ddd;
            background-color: #fff;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            display: inline-block; 
        }

        .gantt-table {
            border-collapse: collapse;
        }

        .gantt-table th,
        .gantt-table td {
            border: 1px solid #eee;
            padding: 0;
            text-align: center;
            height: 40px;
            box-sizing: border-box;
            position: relative;
        }

        .gantt-header-row th {
            font-weight: bold;
            background-color: #e9e9e9;
            height: 30px;
            vertical-align: middle;
            white-space: nowrap;
        }

        .gantt-day-header th {
            width: 22px;
            min-width: 22px;
            font-size: 10px;
            background-color: #f9f9f9;
            height: 25px;
            vertical-align: middle;
            white-space: nowrap;
        }

        .holiday-bg {
            background-color: #ffe0e0;
        }

        .gantt-task-row td {
            vertical-align: middle;
            height: 45px;
        }

        .gantt-bar-container {
            position: absolute;
            top: 50%;
            left: 0;
            transform: translateY(-50%);
            height: 30px;
            border-radius: 4px;
            background: #4caf50;
            color: #fff;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.9em;
            box-shadow: 1px 1px 3px rgba(0, 0, 0, 0.2);
            overflow: hidden;
            white-space: nowrap;
            text-overflow: ellipsis;
            padding: 0 5px;
            z-index: 2;
            transition: font-size 0.1s ease-in-out;
            cursor: pointer;
        }

        .gantt-bar-done {
            background: #efefef !important;
            color: #8f8f8f;
        }

        /* ------ ここから追加 ------ */
        .gantt-bar-container.short-bar {
            color: transparent !important; /* バー内の文字を透明に */
            position: relative;
        }
        .gantt-bar-label {
            position: absolute;
            left: 100%; /* バーの右端 */
            top: 50%;
            transform: translateY(-50%);
            white-space: nowrap;
            margin-left: 4px;
            color: #333;
            font-size: 0.9em;
            pointer-events: none; /* クリックはバー本体へ */
        }
        .gantt-bar-container.gantt-bar-done + .gantt-bar-label {
            color: #8f8f8f;
        }
        /* ------ ここまで追加 ------ */

        .gantt-chart-container thead {
            position: sticky;
            top: 0;
            z-index: 10;
        }

        .gantt-tooltip {
            position: absolute;
            background-color: #333;
            color: #fff;
            padding: 8px 12px;
            border-radius: 4px;
            font-size: 14px;
            white-space: nowrap;
            z-index: 100;
            opacity: 0;
            transition: opacity 0.2s, transform 0.2s;
            pointer-events: none;
            transform: translate(-50%, -10px);
            display: none;
        }

        .gantt-tooltip.show {
            opacity: 1;
            transform: translate(-50%, -20px);
            display: block;
        }
    </style>
</head>
<body>
    <div class="gantt-chart-container">
        <table class="gantt-table">
            <thead>
                <tr class="gantt-header-row">
                </tr>
                <tr class="gantt-day-header">
                </tr>
            </thead>
            <tbody>
            </tbody>
        </table>
    </div>

    <div id="gantt-tooltip" class="gantt-tooltip"></div>

    <script>
        const ganttHeaderYearMonthRow = document.querySelector('.gantt-header-row');
        const ganttDayHeaderRow = document.querySelector('.gantt-day-header');
        const ganttTableBody = document.querySelector('.gantt-table tbody');
        const tooltip = document.getElementById('gantt-tooltip');

        const dayWidth = 22;
        const day_holiday = [0, 6];

        const specific_holidays = [
            "2025/08/12", "2025/08/13", "2025/08/14", "2025/08/15",
            "2025/07/21", "2025/08/11", "2025/09/15", "2025/09/23",
            "2025/10/13", "2025/11/03", "2025/11/23", "2025/11/24",
            "2026/01/01", "2026/01/12", "2026/02/11", "2026/02/23",
            "2026/03/20", "2026/04/29", "2026/05/03", "2026/05/04",
            "2026/05/05", "2026/05/06", "2026/07/20", "2026/08/11",
            "2026/09/21", "2026/09/22", "2026/09/23", "2026/10/12",
            "2026/11/03", "2026/11/23"
        ].map(dateStr => {
            const [y, m, d] = dateStr.split('/').map(Number);
            return new Date(y, m - 1, d).setHours(0, 0, 0, 0);
        });

        const smallBarThreshold = 90;
        let tooltipHideTimeout;

        function parseDate(dateString) {
            const [year, month, day] = dateString.split('/').map(Number);
            return new Date(year, month - 1, day);
        }

        function formatDate(date) {
            const year = date.getFullYear();
            const month = (date.getMonth() + 1).toString().padStart(2, '0');
            const day = date.getDate().toString().padStart(2, '0');
            return `${year}/${month}/${day}`;
        }

        function getDaysBetween(startDate, endDate) {
            const dates = [];
            let currentDate = new Date(startDate);
            currentDate.setHours(0, 0, 0, 0);
            while (currentDate <= endDate) {
                dates.push(new Date(currentDate));
                currentDate.setDate(currentDate.getDate() + 1);
            }
            return dates;
        }

        function isHoliday(date) {
            const isWeekend = day_holiday.includes(date.getDay());
            const isSpecificHoliday = specific_holidays.includes(date.setHours(0, 0, 0, 0));
            return isWeekend || isSpecificHoliday;
        }

        function showTooltip(element, text) {
            clearTimeout(tooltipHideTimeout);
            tooltip.textContent = text;
            tooltip.classList.add('show');
            const rect = element.getBoundingClientRect();
            tooltip.style.left = `${rect.left + rect.width / 2 + window.scrollX}px`;
            tooltip.style.top = `${rect.top + window.scrollY}px`;
            tooltipHideTimeout = setTimeout(() => {
                tooltip.classList.remove('show');
            }, 3000);
        }

        function hideTooltip() {
            clearTimeout(tooltipHideTimeout);
            tooltip.classList.remove('show');
        }

        function renderGanttChart(tasks) {
            let minDate = new Date(Math.min(...tasks.map(task => parseDate(task.start))));
            let maxDate = new Date(Math.max(...tasks.map(task => parseDate(task.end))));
            minDate.setDate(minDate.getDate() - 7);
            maxDate.setDate(maxDate.getDate() + 14);
            minDate.setHours(0, 0, 0, 0);
            maxDate.setHours(0, 0, 0, 0);

            const chartDates = getDaysBetween(minDate, maxDate);
            const totalDays = chartDates.length;

            // 年月ヘッダー
            ganttHeaderYearMonthRow.innerHTML = '';
            let currentYear = -1;
            let currentMonth = -1;
            let monthDayCount = 0;

            for (let i = 0; i < totalDays; i++) {
                const date = chartDates[i];
                const year = date.getFullYear();
                const month = date.getMonth();

                if (year !== currentYear || month !== currentMonth) {
                    if (monthDayCount > 0) {
                        const prevMonthHeader = ganttHeaderYearMonthRow.lastChild;
                        if (prevMonthHeader) {
                            prevMonthHeader.colSpan = monthDayCount;
                        }
                    }
                    const monthHeader = document.createElement('th');
                    monthHeader.textContent = `${year}年${month + 1}月`;
                    ganttHeaderYearMonthRow.appendChild(monthHeader);
                    currentYear = year;
                    currentMonth = month;
                    monthDayCount = 1;
                } else {
                    monthDayCount++;
                }
                if (i === totalDays - 1 && monthDayCount > 0) {
                    const lastMonthHeader = ganttHeaderYearMonthRow.lastChild;
                    if (lastMonthHeader) {
                        lastMonthHeader.colSpan = monthDayCount;
                    }
                }
            }

            // 日ヘッダー
            ganttDayHeaderRow.innerHTML = '';
            chartDates.forEach((date, index) => {
                const dayTh = document.createElement('th');
                dayTh.textContent = date.getDate();
                if (isHoliday(date)) {
                    dayTh.classList.add('holiday-bg');
                }
                dayTh.style.width = `${dayWidth}px`;
                ganttDayHeaderRow.appendChild(dayTh);
            });

            // タスク行
            ganttTableBody.innerHTML = '';
            tasks.forEach(task => {
                const taskRow = document.createElement('tr');
                taskRow.classList.add('gantt-task-row');

                const taskStartDate = parseDate(task.start);
                const taskEndDate = parseDate(task.end);

                chartDates.forEach((date, index) => {
                    const cell = document.createElement('td');
                    if (isHoliday(date)) {
                        cell.classList.add('holiday-bg');
                    }
                    cell.style.width = `${dayWidth}px`; 
                    taskRow.appendChild(cell);
                });

                const chartDateStrings = chartDates.map(d => formatDate(d));
                const startDayIndex = chartDateStrings.indexOf(formatDate(taskStartDate));
                const endDayIndex = chartDateStrings.indexOf(formatDate(taskEndDate));

                if (startDayIndex !== -1 && endDayIndex !== -1) {
                    const durationDays = endDayIndex - startDayIndex + 1;
                    const barWidth = durationDays * dayWidth - 2;

                    // バーの作成
                    const taskBarContainer = document.createElement('div');
                    taskBarContainer.classList.add('gantt-bar-container');
                    if (task.done === 1) {
                        taskBarContainer.classList.add('gantt-bar-done');
                    }
                    taskBarContainer.style.width = `${barWidth}px`;

                    if (barWidth < smallBarThreshold) {
                        // バー内の文字を透明にし、右にラベルを追加
                        taskBarContainer.classList.add('short-bar');
                        taskBarContainer.textContent = task.name; // 透明化される
                        const label = document.createElement('span');
                        label.className = 'gantt-bar-label';
                        label.textContent = task.name;
                        // バーのグレー化にも対応
                        if (task.done === 1) label.style.color = '#8f8f8f';
                        taskBarContainer.appendChild(label);
                    } else {
                        taskBarContainer.textContent = task.name;
                    }

                    taskBarContainer.addEventListener('click', () => {
                        showTooltip(taskBarContainer, task.name);
                    });

                    const startCell = taskRow.children[startDayIndex];
                    if (startCell) {
                        startCell.appendChild(taskBarContainer);
                    }
                }
                ganttTableBody.appendChild(taskRow);
            });
        }

        document.addEventListener('DOMContentLoaded', () => {
            fetch('tasks.json')
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    renderGanttChart(data);
                })
                .catch(error => {
                    console.error('Error loading tasks.json:', error);
                    const errorMessage = document.createElement('p');
                    errorMessage.textContent = 'タスクデータの読み込みに失敗しました。';
                    document.body.appendChild(errorMessage);
                });
        });
    </script>
</body>
</html>
